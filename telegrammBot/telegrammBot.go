package main

import (
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api      *tgbotapi.BotAPI
	commands map[string]func(update tgbotapi.Update)
}

func NewBot(token string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	bot := &Bot{
		api:      api,
		commands: make(map[string]func(update tgbotapi.Update)),
	}

	bot.registerCommands()
	return bot, nil
}

func (b *Bot) registerCommands() {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
	b.commands["/start"] = b.handleStart
	b.commands["/help"] = b.handleHelp
	b.commands["/echo"] = b.handleEcho
	b.commands["/calc"] = b.handleCalc
}

func (b *Bot) handleStart(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"+
			"–Ø –ø—Ä–∏–º–µ—Ä –±–æ—Ç–∞ –Ω–∞ Go.\n"+
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"+
			"/help - –ø–æ–º–æ—â—å\n"+
			"/echo [—Ç–µ–∫—Å—Ç] - —ç—Ö–æ\n"+
			"/calc [—á–∏—Å–ª–æ] [–æ–ø–µ—Ä–∞—Ç–æ—Ä] [—á–∏—Å–ª–æ] - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n"+
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
	b.sendMessage(msg)
}

func (b *Bot) handleHelp(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"+
			"‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"+
			"‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"+
			"‚Ä¢ /echo [—Ç–µ–∫—Å—Ç] - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç\n"+
			"‚Ä¢ /calc [—á–∏—Å–ª–æ] [+-*/] [—á–∏—Å–ª–æ] - –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n"+
			"–ü—Ä–∏–º–µ—Ä—ã:\n"+
			"/echo –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\n"+
			"/calc 5 + 3")
	b.sendMessage(msg)
}

func (b *Bot) handleEcho(update tgbotapi.Update) {
	text := update.Message.Text
	args := strings.TrimSpace(strings.TrimPrefix(text, "/echo"))

	if args == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo [—Ç–µ–∫—Å—Ç]")
		b.sendMessage(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üîä "+args)
	b.sendMessage(msg)
}

func (b *Bot) handleCalc(update tgbotapi.Update) {
	text := update.Message.Text
	args := strings.Fields(strings.TrimPrefix(text, "/calc"))

	if len(args) != 3 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"üßÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /calc [—á–∏—Å–ª–æ] [–æ–ø–µ—Ä–∞—Ç–æ—Ä] [—á–∏—Å–ª–æ]\n"+
				"–ü—Ä–∏–º–µ—Ä: /calc 5 + 3")
		b.sendMessage(msg)
		return
	}

	a, err1 := strconv.ParseFloat(args[0], 64)
	operator := args[1]
	bNum, err2 := strconv.ParseFloat(args[2], 64)

	if err1 != nil || err2 != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
		b.sendMessage(msg)
		return
	}

	var result float64
	var errorMsg string

	switch operator {
	case "+":
		result = a + bNum
	case "-":
		result = a - bNum
	case "*":
		result = a * bNum
	case "/":
		if bNum == 0 {
			errorMsg = "‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
		} else {
			result = a / bNum
		}
	default:
		errorMsg = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +, -, *, /"
	}

	if errorMsg != "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, errorMsg)
		b.sendMessage(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: "+args[0]+" "+operator+" "+args[2]+" = "+strconv.FormatFloat(result, 'f', -1, 64))
	b.sendMessage(msg)
}

func (b *Bot) handleUnknownCommand(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	b.sendMessage(msg)
}

func (b *Bot) handleTextMessage(update tgbotapi.Update) {
	response := "üì® –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: " + update.Message.Text
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
	b.sendMessage(msg)
}

func (b *Bot) sendMessage(msg tgbotapi.MessageConfig) {
	msg.ParseMode = "HTML"
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) Start() {
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if update.Message.IsCommand() {
			command := update.Message.Command()
			if handler, exists := b.commands["/"+command]; exists {
				handler(update)
			} else {
				b.handleUnknownCommand(update)
			}
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		b.handleTextMessage(update)
	}
}

func main() {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	bot, err := NewBot(token)
	if err != nil {
		log.Fatal(err)
	}

	bot.Start()
}
