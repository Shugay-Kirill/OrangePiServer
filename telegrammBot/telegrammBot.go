package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type Bot struct {
	api    *tgbotapi.BotAPI
	config *Config
	token  string
}

type Config struct {
	TelegramToken string
	Debug         bool
}

func LoadConfig() *Config {
	_ = godotenv.Load()

	return &Config{
		TelegramToken: getEnv("TELEGRAM_BOT_TOKEN", ""),
		Debug:         getEnvAsBool("DEBUG", false),
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getEnvAsBool(key string, defaultValue bool) bool {
	if value := os.Getenv(key); value != "" {
		if boolValue, err := strconv.ParseBool(value); err == nil {
			return boolValue
		}
	}
	return defaultValue
}

func NewBot(config *Config) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		return nil, err
	}

	api.Debug = config.Debug

	return &Bot{
		api:    api,
		config: config,
		token:  config.TelegramToken,
	}, nil
}

// sendMessageToThread –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
func (b *Bot) sendMessageToThread(chatID int64, threadID int, text string) error {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", b.token)

	requestBody := map[string]interface{}{
		"chat_id":    chatID,
		"text":       text,
		"parse_mode": "HTML",
	}

	// –ï—Å–ª–∏ threadID –Ω–µ 0, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä message_thread_id
	if threadID != 0 {
		requestBody["message_thread_id"] = threadID
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return err
	}

	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("HTTP error: %s", resp.Status)
	}

	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d, —Ç–æ–ø–∏–∫ %d", chatID, threadID)
	return nil
}

// getThreadIDFromMessage –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å ID —Ç–æ–ø–∏–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) getThreadIDFromMessage(message *tgbotapi.Message) int {
	// –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —ç—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ
	// –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
	messageValue := reflect.ValueOf(message).Elem()
	if messageValue.IsValid() {
		threadIDField := messageValue.FieldByName("message_thread_id")
		if threadIDField.IsValid() && threadIDField.CanInterface() {
			if threadID, ok := threadIDField.Interface().(int); ok {
				return threadID
			}
		}
	}

	// –ï—Å–ª–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Reply –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤ —Ç–æ–ø–∏–∫–µ
	if message.ReplyToMessage != nil {
		replyValue := reflect.ValueOf(message.ReplyToMessage).Elem()
		if replyValue.IsValid() {
			threadIDField := replyValue.FieldByName("message_thread_id")
			if threadIDField.IsValid() && threadIDField.CanInterface() {
				if threadID, ok := threadIDField.Interface().(int); ok {
					return threadID
				}
			}
		}
	}

	return 0
}

func (b *Bot) handleStart(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	threadID := b.getThreadIDFromMessage(update.Message)

	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ /start: ChatID=%d, ThreadID=%d", chatID, threadID)

	message := `ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>

–û—Ç–ª–∏—á–Ω–æ! –Ø —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID —á–∞—Ç–∞: ` + strconv.FormatInt(chatID, 10) + `
‚Ä¢ ID —Ä–∞–∑–¥–µ–ª–∞: ` + strconv.Itoa(threadID) + `
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ–º–µ! ‚úÖ`

	if err := b.sendMessageToThread(chatID, threadID, message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		// Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
		b.sendFallbackMessage(chatID, message)
	}
}

func (b *Bot) handleMessage(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	threadID := b.getThreadIDFromMessage(update.Message)

	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [%s] –≤ ChatID=%d, ThreadID=%d: %s",
		update.Message.From.UserName, chatID, threadID, update.Message.Text)

	response := `‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ–º–µ!</b>

<b>–¢–µ–∫—Å—Ç:</b> ` + update.Message.Text + `

<b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID —á–∞—Ç–∞: ` + strconv.FormatInt(chatID, 10) + `
‚Ä¢ ID —Ä–∞–∑–¥–µ–ª–∞: ` + strconv.Itoa(threadID) + `
‚Ä¢ Username: @` + update.Message.From.UserName + `

üéØ <i>–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ —Ç–µ–º–µ!</i>`

	if err := b.sendMessageToThread(chatID, threadID, response); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–æ–ø–∏–∫: %v", err)
		b.sendFallbackMessage(chatID, response)
	}
}

// sendFallbackMessage –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
func (b *Bot) sendFallbackMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) Start() {
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: %s", b.api.Self.UserName)
	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ API")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() && update.Message.Command() == "start" {
			b.handleStart(update)
			continue
		}

		b.handleMessage(update)
	}
}

func main() {
	log.Println("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	config := LoadConfig()

	log.Println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
	bot, err := NewBot(config)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	bot.Start()
}
