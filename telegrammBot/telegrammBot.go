package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"strconv"
)

type Bot struct {
	token string
}

type Update struct {
	UpdateID int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	MessageID int    `json:"message_id"`
	From      User   `json:"from"`
	Chat      Chat   `json:"chat"`
	Text      string `json:"text"`
	// –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ message_thread_id –∏–∑ JSON
	MessageThreadID int `json:"message_thread_id"`
	// –ü–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
	Photo    []PhotoSize `json:"photo"`
	Document Document    `json:"document"`
	Caption  string      `json:"caption"`
}

type User struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	Username  string `json:"username"`
}

type Chat struct {
	ID    int64  `json:"id"`
	Type  string `json:"type"`
	Title string `json:"title"`
}

type PhotoSize struct {
	FileID       string `json:"file_id"`
	FileUniqueID string `json:"file_unique_id"`
	Width        int    `json:"width"`
	Height       int    `json:"height"`
	FileSize     int    `json:"file_size"`
}

type Document struct {
	FileID       string    `json:"file_id"`
	FileUniqueID string    `json:"file_unique_id"`
	Thumbnail    PhotoSize `json:"thumb"`
	FileName     string    `json:"file_name"`
	MimeType     string    `json:"mime_type"`
	FileSize     int       `json:"file_size"`
}

func NewBot(config *Config) *Bot {
	return &Bot{
		token: config.TelegramToken,
	}
}

func (b *Bot) startPolling() {
	log.Println("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä—è–º—ã–º polling...")
	log.Println("üìù –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–∞—Ö...")
	offset := 0

	for {
		updates, err := b.getUpdates(offset)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è updates: %v", err)
			continue
		}

		for _, update := range updates {
			b.handleUpdate(update)
			offset = update.UpdateID + 1
		}
	}
}

func (b *Bot) getUpdates(offset int) ([]Update, error) {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/getUpdates?offset=%d&timeout=60", b.token, offset)

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	maxLengthMessegeAPI := 5000
	if len(body) > 0 {
		log.Printf("üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: %s", string(body)[:min(maxLengthMessegeAPI, len(body))])
	}

	var response struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}

	if err := json.Unmarshal(body, &response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		return nil, err
	}

	if !response.OK {
		return nil, fmt.Errorf("API error: %s", string(body))
	}

	return response.Result, nil
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func (b *Bot) handleUpdate(update Update) {
	if update.Message.Text == "" {
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
	log.Printf("   üë§ –û—Ç: %s (@%s)", update.Message.From.FirstName, update.Message.From.Username)
	log.Printf("   üí¨ –¢–µ–∫—Å—Ç: %s", update.Message.Text)
	log.Printf("   üÜî Chat ID: %d", update.Message.Chat.ID)
	log.Printf("   üè∑Ô∏è Thread ID: %d", update.Message.MessageThreadID)
	log.Printf("   üìä –¢–∏–ø —á–∞—Ç–∞: %s", update.Message.Chat.Type)
	if update.Message.Chat.Title != "" {
		log.Printf("   üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: %s", update.Message.Chat.Title)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if update.Message.Text == "/start" {
		b.handleStart(update)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message.Text == "/infoMessege" {
		b.handleRegularMessage(update)
		return
	}

}

func (b *Bot) handleStart(update Update) {
	chatID := update.Message.Chat.ID
	threadID := update.Message.MessageThreadID

	message := fmt.Sprintf(`ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>

–ü—Ä–∏–≤–µ—Ç, <b>%s</b>! üéâ

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:</b>
‚Ä¢ üí¨ –ß–∞—Ç: <code>%d</code>
‚Ä¢ üè∑Ô∏è –¢–æ–ø–∏–∫: <code>%d</code>
‚Ä¢ üë§ –í–∞—à ID: <code>%d</code>

‚úÖ <i>–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫!</i>`,
		update.Message.From.FirstName,
		chatID,
		threadID,
		update.Message.From.ID,
	)

	if err := b.sendMessage(chatID, threadID, message); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleRegularMessage(update Update) {
	chatID := update.Message.Chat.ID
	threadID := update.Message.MessageThreadID

	message := fmt.Sprintf(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>

<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>%s</code>

<b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ üë§ –û—Ç: <b>%s</b> (@%s)
‚Ä¢ üí¨ –ß–∞—Ç ID: <code>%d</code>
‚Ä¢ üè∑Ô∏è –¢–æ–ø–∏–∫ ID: <code>%d</code>
‚Ä¢ üìä –¢–∏–ø —á–∞—Ç–∞: %s

üéØ <i>–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫!</i>`,
		update.Message.Text,
		update.Message.From.FirstName,
		update.Message.From.Username,
		chatID,
		threadID,
		update.Message.Chat.Type,
	)

	if err := b.sendMessage(chatID, threadID, message); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) sendMessage(chatID int64, threadID int, text string) error {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", b.token)

	params := url.Values{}
	params.Add("chat_id", strconv.FormatInt(chatID, 10))
	params.Add("text", text)
	params.Add("parse_mode", "HTML")

	// –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: –ø–µ—Ä–µ–¥–∞–µ–º message_thread_id –µ—Å–ª–∏ –æ–Ω –Ω–µ 0
	if threadID != 0 {
		params.Add("message_thread_id", strconv.Itoa(threadID))
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ %d", threadID)
	} else {
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
	}

	resp, err := http.PostForm(apiURL, params)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
	body, _ := io.ReadAll(resp.Body)

	if resp.StatusCode != http.StatusOK {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ API: %s - %s", resp.Status, string(body))
		return fmt.Errorf("API error: %s - %s", resp.Status, string(body))
	}

	log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
	log.Printf("   üí¨ –ß–∞—Ç: %d", chatID)
	log.Printf("   üè∑Ô∏è –¢–æ–ø–∏–∫: %d", threadID)

	return nil
}

func main() {
	log.Println("üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	config := LoadConfig()

	if config.TelegramToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª")
	}

	log.Println("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
	bot := NewBot(config)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	log.Println("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
	testURL := fmt.Sprintf("https://api.telegram.org/bot%s/getMe", config.TelegramToken)
	resp, err := http.Get(testURL)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if result["ok"].(bool) {
		botInfo := result["result"].(map[string]interface{})
		log.Printf("‚úÖ –ë–æ—Ç @%s –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", botInfo["username"])
	} else {
		log.Fatal("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
	}

	bot.startPolling()
}
