package main

import (
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api    *tgbotapi.BotAPI
	config *Config
}

func NewBot(config *Config) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		return nil, err
	}

	api.Debug = config.Debug

	return &Bot{
		api:    api,
		config: config,
	}, nil
}

func (b *Bot) handleStart(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ —Ç–æ–ø–∏–∫–µ
	chatID := update.Message.Chat.ID
	threadID := b.getMessageThreadID(update.Message)

	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ /start: ChatID=%d, ThreadID=%d", chatID, threadID)

	var message string
	chatType := b.getChatType(update.Message.Chat)

	if chatType == "private" {
		message = `ü§ñ <b>–ü—Ä–∏–≤–µ—Ç!</b>

–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç.

–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ`
	} else {
		message = `ü§ñ <b>–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!</b>

–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Ç–æ–ø–∏–∫–∞—Ö.

<b>–Ø —É–º–µ—é:</b>
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Ç–æ–ø–∏–∫–µ, –≥–¥–µ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ—Ä—É–º–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö —Å —Ç–µ–º–∞–º–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è`
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := b.sendMessage(chatID, threadID, message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) handleMessage(update tgbotapi.Update) {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
	chatID := update.Message.Chat.ID
	threadID := b.getMessageThreadID(update.Message)
	chatType := b.getChatType(update.Message.Chat)

	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [%s] –≤ %s (ChatID: %d, ThreadID: %d): %s",
		update.Message.From.UserName,
		chatType,
		chatID,
		threadID,
		update.Message.Text)

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
	var response string

	if update.Message.IsCommand() {
		response = "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
	} else {
		response = "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n" +
			"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.\n\n" +
			"<i>–¢–µ–∫—Å—Ç:</i> " + update.Message.Text
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	response += "\n\nüìã <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i>\n" +
		"–ß–∞—Ç: " + chatType + "\n" +
		"ID —á–∞—Ç–∞: " + strconv.FormatInt(chatID, 10) + "\n" +
		"ID —Ä–∞–∑–¥–µ–ª–∞: " + strconv.Itoa(threadID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendMessage —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ø–∏–∫–æ–≤
func (b *Bot) sendMessage(chatID int64, threadID int, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –ï—Å–ª–∏ threadID != 0, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ç–æ–ø–∏–∫ –∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MessageThreadID
	if threadID != 0 {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª—è
		// –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é:
		// msg.MessageThreadID = threadID

		// –û–±—Ö–æ–¥–Ω–æ–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
		msg = tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"

		// –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MessageThreadID —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ–±—â–µ–Ω–∏—è
		// –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ø–∏–∫–∏
		if setThreadID(msg, threadID) {
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–ø–∏–∫ ID: %d", threadID)
		} else {
			log.Printf("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MessageThreadID, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
		}
	}

	_, err := b.api.Send(msg)
	return err
}

// setThreadID –ø—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MessageThreadID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
func setThreadID(msg tgbotapi.MessageConfig, threadID int) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è MessageThreadID —á–µ—Ä–µ–∑ type assertion
	// –≠—Ç–æ –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	if msgConfig, ok := interface{}(msg).(interface{ SetMessageThreadID(int) }); ok {
		// –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ SetMessageThreadID
		msgConfig.SetMessageThreadID(threadID)
		return true
	}
	return false
}

// getMessageThreadID –ø–æ–ª—É—á–∞–µ—Ç ID —Ç—Ä–µ–¥–∞/—Ç–æ–ø–∏–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) getMessageThreadID(message *tgbotapi.Message) int {
	if message == nil {
		return 0
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å MessageThreadID —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	if msg, ok := interface{}(message).(interface{ GetMessageThreadID() int }); ok {
		return msg.GetMessageThreadID()
	}

	// –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π)
	// –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
	return 0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID
}

// getChatType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —á–∞—Ç–∞
func (b *Bot) getChatType(chat *tgbotapi.Chat) string {
	switch {
	case chat.IsPrivate():
		return "–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
	case chat.IsGroup():
		return "–≥—Ä—É–ø–ø–∞"
	case chat.IsSuperGroup():
		return "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
	case chat.IsChannel():
		return "–∫–∞–Ω–∞–ª"
	default:
		return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
	}
}

func (b *Bot) Start() {
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: %s (ID: %d)", b.api.Self.UserName, b.api.Self.ID)
	log.Printf("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: %v", b.config.Debug)
	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
	log.Println("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–∏–∫–∞–º–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
	log.Println("1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
	log.Println("2. –í –≥—Ä—É–ø–ø–µ –≤–∫–ª—é—á–µ–Ω—ã —Ç–µ–º—ã/—Ç–æ–ø–∏–∫–∏")
	log.Println("3. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		if update.Message.IsCommand() && update.Message.Command() == "start" {
			b.handleStart(update)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		b.handleMessage(update)
	}
}

func main() {
	log.Println("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	config := LoadConfig()

	log.Println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
	bot, err := NewBot(config)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	bot.Start()
}
