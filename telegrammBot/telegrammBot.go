package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type Bot struct {
	token  string
	config *Config
}

type Update struct {
	UpdateID int      `json:"update_id"`
	Message  *Message `json:"message"` // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å
}

type Message struct {
	MessageID       int         `json:"message_id"`
	From            User        `json:"from"`
	Chat            Chat        `json:"chat"`
	Text            string      `json:"text"`
	MessageThreadID int         `json:"message_thread_id"`
	Photo           []PhotoSize `json:"photo"`
	Document        Document    `json:"document"`
	Caption         string      `json:"caption"`
}

type User struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	Username  string `json:"username"`
}

type Chat struct {
	ID    int64  `json:"id"`
	Type  string `json:"type"`
	Title string `json:"title"`
}

type PhotoSize struct {
	FileID       string `json:"file_id"`
	FileUniqueID string `json:"file_unique_id"`
	Width        int    `json:"width"`
	Height       int    `json:"height"`
	FileSize     int    `json:"file_size"`
}

type Document struct {
	FileID       string    `json:"file_id"`
	FileUniqueID string    `json:"file_unique_id"`
	Thumbnail    PhotoSize `json:"thumb"`
	FileName     string    `json:"file_name"`
	MimeType     string    `json:"mime_type"`
	FileSize     int       `json:"file_size"`
}

func NewBot(config *Config) *Bot {
	return &Bot{
		token:  config.TelegramToken,
		config: config,
	}
}

func (b *Bot) startPolling() {
	log.Println("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä—è–º—ã–º polling...")
	log.Printf("üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ API: %d —Å–∏–º–≤–æ–ª–æ–≤", b.config.MaxLengthAPIOutput)
	log.Println("üìù –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–∞—Ö...")
	offset := 0

	for {
		updates, err := b.getUpdates(offset)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è updates: %v", err)
			continue
		}

		for _, update := range updates {
			b.handleUpdate(update)
			offset = update.UpdateID + 1
		}
	}
}

func (b *Bot) getUpdates(offset int) ([]Update, error) {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/getUpdates?offset=%d&timeout=60", b.token, offset)

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MAX_LENGTH_MESSEGE_API
	if len(body) > 0 {
		maxLength := b.config.MaxLengthAPIOutput
		output := string(body)
		if len(output) > maxLength {
			output = output[:maxLength] + "..."
		}
		log.Printf("üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (%d/%d —Å–∏–º–≤–æ–ª–æ–≤): %s", len(body), maxLength, output)
	}

	var response struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}

	if err := json.Unmarshal(body, &response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		return nil, err
	}

	if !response.OK {
		return nil, fmt.Errorf("API error: %s", string(body))
	}

	return response.Result, nil
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func (b *Bot) handleUpdate(update Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Message –Ω–µ nil
	if update.Message == nil {
		return
	}

	message := update.Message

	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
	log.Printf("   üë§ –û—Ç: %s (@%s)", message.From.FirstName, message.From.Username) // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.From.Username
	log.Printf("   üÜî Chat ID: %d", message.Chat.ID)
	log.Printf("   üè∑Ô∏è Thread ID: %d", message.MessageThreadID)
	log.Printf("   üìä –¢–∏–ø —á–∞—Ç–∞: %s", message.Chat.Type)
	if message.Chat.Title != "" {
		log.Printf("   üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: %s", message.Chat.Title)
	}

	if len(message.Photo) > 0 {
		log.Printf("   üì∏ –§–æ—Ç–æ: %d –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞", len(message.Photo))
		b.handlePhoto(update)
		return
	}

	if message.Document.FileID != "" {
		log.Printf("   üìé –î–æ–∫—É–º–µ–Ω—Ç: %s", message.Document.FileName)
		b.handleDocument(update)
		return
	}

	if message.Text == "" {
		log.Printf("   üí¨ –¢–µ–∫—Å—Ç: (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø)")
		b.handleOtherMessage(update)
		return
	}

	log.Printf("   üí¨ –¢–µ–∫—Å—Ç: %s", message.Text)

	if message.Text == "/start" {
		b.handleStart(update)
		return
	}

	if message.Text == "/help" {
		b.handleHelp(update)
		return
	}

	if message.Text == "/features" {
		b.handleFeatures(update)
		return
	}

	if message.Text == "/info" {
		b.handleInfo(update)
		return
	}

	b.handleRegularMessage(update)
}

func (b *Bot) isJPGImage(document Document) bool {
	if strings.HasPrefix(document.MimeType, "image/jpeg") {
		return true
	}

	fileName := strings.ToLower(document.FileName)
	if strings.HasSuffix(fileName, ".jpg") || strings.HasSuffix(fileName, ".jpeg") {
		return true
	}

	if document.MimeType == "image/jpg" {
		return true
	}

	return false
}

func (b *Bot) getLargestPhoto(photos []PhotoSize) PhotoSize {
	if len(photos) == 0 {
		return PhotoSize{}
	}

	largest := photos[0]
	for _, photo := range photos {
		if photo.FileSize > largest.FileSize {
			largest = photo
		}
	}
	return largest
}

func (b *Bot) handlePhoto(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	largestPhoto := b.getLargestPhoto(message.Photo)

	response := fmt.Sprintf(`üì∏ <b>–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ!</b>

üñºÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ:</b>
‚Ä¢ üìè –†–∞–∑–º–µ—Ä: <b>%d√ó%d</b> –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ üíæ –í–µ—Å: <b>%.2f KB</b>
‚Ä¢ üÜî File ID: <code>%s</code>

üìù <b>–ü–æ–¥–ø–∏—Å—å:</b> %s

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –≠—Ç–æ JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Telegram –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –≤ JPG)

üéØ <i>–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!</i>`,
		largestPhoto.Width,
		largestPhoto.Height,
		float64(largestPhoto.FileSize)/1024,
		largestPhoto.FileID[:min(20, len(largestPhoto.FileID))]+"...",
		b.getCaptionText(message.Caption),
	)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleDocument(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	document := message.Document
	isJPG := b.isJPGImage(document)

	var status string
	if isJPG {
		status = "‚úÖ <b>–≠—Ç–æ JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>"
	} else {
		status = "‚ùå <b>–≠—Ç–æ –Ω–µ JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>"
	}

	response := fmt.Sprintf(`üìé <b>–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç!</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b>
‚Ä¢ üìù –ò–º—è: <code>%s</code>
‚Ä¢ üè∑Ô∏è MIME Type: <b>%s</b>
‚Ä¢ üíæ –†–∞–∑–º–µ—Ä: <b>%.2f KB</b>
‚Ä¢ üÜî File ID: <code>%s</code>

üìù <b>–ü–æ–¥–ø–∏—Å—å:</b> %s

%s

üéØ <i>–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É JPG!</i>`,
		document.FileName,
		document.MimeType,
		float64(document.FileSize)/1024,
		document.FileID[:min(20, len(document.FileID))]+"...",
		b.getCaptionText(message.Caption),
		status,
	)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleOtherMessage(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	response := `üîÆ <b>–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞!</b>

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –¢–∏–ø: –ù–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å: —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Ç–∏–∫–µ—Ä, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç.–¥.

üí° <b>–ß—Ç–æ —è —É–º–µ—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å:</b>
‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –∫–∞–∫ JPG)
‚Ä¢ üìé –î–æ–∫—É–º–µ–Ω—Ç—ã (–ø—Ä–æ–≤–µ—Ä—è—é —Ñ–æ—Ä–º–∞—Ç JPG)
‚Ä¢ üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üéØ <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥</i>`

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) getCaptionText(caption string) string {
	if caption == "" {
		return "<i>–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏</i>"
	}
	return caption
}

func (b *Bot) handleStart(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	response := fmt.Sprintf(`üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!</b>

ü§ñ <b>–Ø - —É–º–Ω—ã–π Telegram –±–æ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</b>

‚ú® <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
‚Ä¢ /features - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞  
‚Ä¢ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ

üõ†Ô∏è <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Ç–æ–ø–∏–∫–µ/—Ä–∞–∑–¥–µ–ª–µ
‚úÖ –†–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚úÖ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ API

‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ API: <b>%d —Å–∏–º–≤–æ–ª–æ–≤</b>

üì∏ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ –§–æ—Ç–æ - —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç JPG - —è –ø—Ä–æ–≤–µ—Ä—é —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ –õ—é–±–æ–π —Ñ–∞–π–ª - —è —Å–∫–∞–∂—É, JPG –ª–∏ —ç—Ç–æ

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:</b>
‚Ä¢ üë§ –í–∞—à–µ –∏–º—è: <b>%s</b>
‚Ä¢ üÜî –í–∞—à ID: <code>%d</code>
‚Ä¢ üí¨ ID —á–∞—Ç–∞: <code>%d</code>
‚Ä¢ üè∑Ô∏è ID —Ç–æ–ø–∏–∫–∞: <code>%d</code>

üí° <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>`,
		message.From.FirstName,
		b.config.MaxLengthAPIOutput,
		message.From.FirstName,
		message.From.ID,
		chatID,
		threadID,
	)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleHelp(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	response := `üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /features - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
‚Ä¢ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ

üîß <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –Ø –æ—Ç–≤–µ—á—É –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ/—Ç–æ–ø–∏–∫–µ
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üì∏ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - —É–≤–∏–¥–∏—Ç–µ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç - –ø—Ä–æ–≤–µ—Ä—é —Ñ–æ—Ä–º–∞—Ç JPG
‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ API: <b>%d —Å–∏–º–≤–æ–ª–æ–≤</b>
‚Ä¢ –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é MAX_LENGTH_MESSEGE_API

‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ —Ç–æ–º —Ç–æ–ø–∏–∫–µ? –û–±–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –±–æ—Ç–∞
‚Ä¢ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /features —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!`

	response = fmt.Sprintf(response, b.config.MaxLengthAPIOutput)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleFeatures(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	response := `üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</b> - –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
‚Ä¢ <b>–†–∞–±–æ—Ç–∞ —Å —Ç–æ–ø–∏–∫–∞–º–∏</b> - –û—Ç–≤–µ—á–∞—é –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ, –≥–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø</b> - –†–∞–±–æ—Ç–∞—é –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö, –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚Ä¢ <b>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

üì∏ <b>–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:</b>
‚Ä¢ <b>–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ</b> - –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–º–µ—Ä, –≤–µ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ JPG</b> - –û–ø—Ä–µ–¥–µ–ª—è—é, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
‚Ä¢ <b>MIME type –∞–Ω–∞–ª–∏–∑</b> - –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ MIME –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ <b>–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –ó–∞–ø–∏—Å—ã–≤–∞—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚Ä¢ <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤—ã–≤–æ–¥ API</b> - –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –ª–æ–≥–æ–≤: <b>%d —Å–∏–º–≤–æ–ª–æ–≤</b>
‚Ä¢ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</b> - –ì—Ä–∞–º–æ—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è—é –æ –Ω–∏—Ö
‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Docker</b> - –ú–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö Docker
‚Ä¢ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ .env</b> - –õ–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é ID —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —á–∞—Ç–æ–≤
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ TELEGRAM_BOT_TOKEN - –¢–æ–∫–µ–Ω –±–æ—Ç–∞
‚Ä¢ DEBUG - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
‚Ä¢ MAX_LENGTH_MESSEGE_API - –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ API (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d)

üõ†Ô∏è <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
‚Ä¢ Webhook –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí° <b>–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</b>`

	response = fmt.Sprintf(response, b.config.MaxLengthAPIOutput, b.config.MaxLengthAPIOutput)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleInfo(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	chatType := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
	switch message.Chat.Type {
	case "private":
		chatType = "üí¨ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
	case "group":
		chatType = "üë• –ì—Ä—É–ø–ø–∞"
	case "supergroup":
		chatType = "üåü –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
	case "channel":
		chatType = "üì¢ –ö–∞–Ω–∞–ª"
	}

	topicStatus := "‚ùå –ù–µ—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç)"
	if threadID != 0 {
		topicStatus = fmt.Sprintf("‚úÖ –î–∞ (ID: %d)", threadID)
	}

	response := fmt.Sprintf(`‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>

üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ üí¨ –¢–∏–ø —á–∞—Ç–∞: <b>%s</b>
‚Ä¢ üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: <b>%s</b>
‚Ä¢ üÜî ID —á–∞—Ç–∞: <code>%d</code>
‚Ä¢ üè∑Ô∏è –¢–æ–ø–∏–∫: %s

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
‚Ä¢ –ò–º—è: <b>%s</b>
‚Ä¢ Username: @%s
‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>%d</code>

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ë–æ—Ç: @%s
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ API –ª–æ–≥–æ–≤: <b>%d —Å–∏–º–≤–æ–ª–æ–≤</b>
‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ‚úÖ –í–∫–ª—é—á–µ–Ω

üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>
–≠—Ç–æ—Ç –±–æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–∏–∫–∞–º–∏ –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö –∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.`,
		chatType,
		b.getChatTitle(message.Chat),
		chatID,
		topicStatus,
		message.From.FirstName,
		message.From.Username, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.From.Username
		message.From.ID,
		b.getBotUsername(),
		b.config.MaxLengthAPIOutput,
	)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) handleRegularMessage(update Update) {
	message := update.Message
	chatID := message.Chat.ID
	threadID := message.MessageThreadID

	response := fmt.Sprintf(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>

üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>%s</code>

üë§ <b>–û—Ç:</b> <b>%s</b> (@%s)

üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ üí¨ –ß–∞—Ç ID: <code>%d</code>
‚Ä¢ üè∑Ô∏è –¢–æ–ø–∏–∫ ID: <code>%d</code>
‚Ä¢ üìè –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ API: <b>%d —Å–∏–º–≤–æ–ª–æ–≤</b>

üì∏ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é - —è –ø–æ–∫–∞–∂—É –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç JPG - —è –ø—Ä–æ–≤–µ—Ä—é —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /features - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

üéØ <i>–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫!</i>`,
		message.Text,
		message.From.FirstName,
		message.From.Username, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.From.Username
		chatID,
		threadID,
		b.config.MaxLengthAPIOutput,
	)

	if err := b.sendMessage(chatID, threadID, response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func (b *Bot) getChatTitle(chat Chat) string {
	if chat.Title != "" {
		return chat.Title
	}
	return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
}

func (b *Bot) getBotUsername() string {
	testURL := fmt.Sprintf("https://api.telegram.org/bot%s/getMe", b.token)
	resp, err := http.Get(testURL)
	if err != nil {
		return "unknown"
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "unknown"
	}

	if result["ok"].(bool) {
		botInfo := result["result"].(map[string]interface{})
		return botInfo["username"].(string)
	}
	return "unknown"
}

func (b *Bot) sendMessage(chatID int64, threadID int, text string) error {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", b.token)

	params := url.Values{}
	params.Add("chat_id", strconv.FormatInt(chatID, 10))
	params.Add("text", text)
	params.Add("parse_mode", "HTML")

	if threadID != 0 {
		params.Add("message_thread_id", strconv.Itoa(threadID))
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ %d", threadID)
	} else {
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
	}

	resp, err := http.PostForm(apiURL, params)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	if resp.StatusCode != http.StatusOK {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ API: %s - %s", resp.Status, string(body))
		return fmt.Errorf("API error: %s - %s", resp.Status, string(body))
	}

	log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
	return nil
}

func main() {
	log.Println("üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	config := LoadConfig()

	if config.TelegramToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª")
	}

	log.Println("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
	bot := NewBot(config)

	log.Println("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
	testURL := fmt.Sprintf("https://api.telegram.org/bot%s/getMe", config.TelegramToken)
	resp, err := http.Get(testURL)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if result["ok"].(bool) {
		botInfo := result["result"].(map[string]interface{})
		log.Printf("‚úÖ –ë–æ—Ç @%s –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", botInfo["username"])
	} else {
		log.Fatal("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
	}

	log.Println("‚ú® –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
	log.Println("   /start - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
	log.Println("   /help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
	log.Println("   /features - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞")
	log.Println("   /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ")
	log.Println("üì∏ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:")
	log.Println("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
	log.Println("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç JPG")
	log.Println("   - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤")
	log.Printf("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
	log.Printf("   - MAX_LENGTH_MESSEGE_API: %d —Å–∏–º–≤–æ–ª–æ–≤", config.MaxLengthAPIOutput)
	log.Printf("   - DEBUG: %v", config.Debug)

	bot.startPolling()
}
