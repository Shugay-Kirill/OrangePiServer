package main

import (
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api    *tgbotapi.BotAPI
	config *Config
}

func NewBot(config *Config) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		return nil, err
	}

	api.Debug = config.Debug

	return &Bot{
		api:    api,
		config: config,
	}, nil
}

func (b *Bot) handleStart(update tgbotapi.Update) {
	var message string

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
	chatType := b.getChatType(update.Message.Chat)

	if chatType == "private" {
		message = `ü§ñ <b>–ü—Ä–∏–≤–µ—Ç!</b>

–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç.

–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`
	} else {
		message = `ü§ñ <b>–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!</b>

–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –û—Ç–≤–µ—á–∞—é –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ, –≥–¥–µ –Ω–∞–ø–∏—Å–∞–ª–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ –ª—é–±–æ–º —á–∞—Ç–µ!`
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "HTML"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ç–æ–ø–∏–∫–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
	b.setMessageThreadID(&msg, update.Message)

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) handleMessage(update tgbotapi.Update) {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
	chatType := b.getChatType(update.Message.Chat)

	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [%s %s] –≤ %s: %s",
		update.Message.From.FirstName,
		update.Message.From.LastName,
		chatType,
		update.Message.Text)

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
	var response string

	if update.Message.IsCommand() {
		response = "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
	} else {
		response = "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n" +
			"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>\"" + update.Message.Text + "\"</i>\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	response += "\n\nüìç <i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: " + chatType + "</i>"

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
	msg.ParseMode = "HTML"

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Ä–∞–∑–¥–µ–ª/—Ç–æ–ø–∏–∫
	b.setMessageThreadID(&msg, update.Message)

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// getChatType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —á–∞—Ç–∞
func (b *Bot) getChatType(chat *tgbotapi.Chat) string {
	switch {
	case chat.IsPrivate():
		return "–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
	case chat.IsGroup():
		return "–≥—Ä—É–ø–ø–∞"
	case chat.IsSuperGroup():
		return "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
	case chat.IsChannel():
		return "–∫–∞–Ω–∞–ª"
	default:
		return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
	}
}

// setMessageThreadID —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Ç—Ä–µ–¥–∞/—Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
func (b *Bot) setMessageThreadID(msg *tgbotapi.MessageConfig, message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –ø–æ–ª–µ MessageThreadID –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
	// –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é
	if message == nil {
		return
	}

	// –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ MessageThreadID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
}

// checkLibraryVersion –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
func (b *Bot) checkLibraryVersion() {
	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ go-telegram-bot-api...")
	log.Println("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–∏–∫–∞–º–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Ä—Å–∏—è >= v5.0.0")
}

func (b *Bot) Start() {
	b.checkLibraryVersion()
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: %s (ID: %d)", b.api.Self.UserName, b.api.Self.ID)
	log.Printf("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: %v", b.config.Debug)
	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		if update.Message.IsCommand() && update.Message.Command() == "start" {
			b.handleStart(update)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		b.handleMessage(update)
	}
}

func main() {
	log.Println("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	config := LoadConfig()

	log.Println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
	bot, err := NewBot(config)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	bot.Start()
}
