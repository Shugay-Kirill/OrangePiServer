package handlersTelegramBot

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"strconv"

	"telegramBot/config"
	"telegramBot/models"
)

type MessageHandler struct {
	Token  string
	Config *config.Config
}

func NewMessageHandler(token string, config *config.Config) *MessageHandler {
	return &MessageHandler{
		Token:  token,
		Config: config,
	}
}

func (h *MessageHandler) HandleUpdate(update models.Update) {
	if update.Message == nil {
		return
	}

	message := update.Message

	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
	log.Printf("   	üë§ –û—Ç: %s (@%s)", message.From.FirstName, message.From.Username)
	log.Printf("   	üÜî Chat ID: %d", message.Chat.ID)
	log.Printf("   	üè∑Ô∏è Thread ID: %d", message.MessageThreadID)
	log.Printf("   	üìä –¢–∏–ø —á–∞—Ç–∞: %s", message.Chat.Type)

	if message.Chat.Title != "" {
		log.Printf("   	üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: %s", message.Chat.Title)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
	switch {
	case len(message.Photo) > 0:
		log.Printf("   	üì∏ –§–æ—Ç–æ: %d –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞", len(message.Photo))
		h.HandlePhoto(update)
	case message.Document.FileID != "":
		log.Printf("   	üìé –î–æ–∫—É–º–µ–Ω—Ç: %s", message.Document.FileName)
		h.HandleDocument(update)
	case message.Text == "":
		log.Printf("   	üí¨ –¢–µ–∫—Å—Ç: (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø)")
		h.HandleOtherMessage(update)
	case message.MessageThreadID == 29:
		log.Printf("   		üí¨ –≠—Ç–æ —á–∞—Ç –ù–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
	default:
		log.Printf("   	üí¨ –¢–µ–∫—Å—Ç: %s", message.Text)
		h.HandleTextMessage(update)
	}
}

func (h *MessageHandler) HandleTextMessage(update models.Update) {
	message := update.Message

	switch message.Text {
	case "/start":
		h.HandleStartCommand(update)
	case "/help":
		h.HandleHelpCommand(update)
	case "/features":
		h.HandleFeaturesCommand(update)
	case "/info":
		h.HandleInfoCommand(update)
	case "/infoMessage":
		h.HandleRegularMessage(update)
	default:
	}
}

func (h *MessageHandler) HandleRegularMessage(update models.Update) {
	message := update.Message
	response := fmt.Sprintf(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>

üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>%s</code>

üë§ <b>–û—Ç:</b> <b>%s</b> (@%s)

üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ üí¨ –ß–∞—Ç ID: <code>%d</code>
‚Ä¢ üè∑Ô∏è –¢–æ–ø–∏–∫ ID: <code>%d</code>
‚Ä¢ üìè –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ API: <b>%d —Å–∏–º–≤–æ–ª–æ–≤</b>

üéØ <i>–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫!</i>`,
		message.Text,
		message.From.FirstName,
		message.From.Username,
		message.Chat.ID,
		message.MessageThreadID,
		h.Config.MaxLengthAPIOutput,
	)

	h.SendMessage(message.Chat.ID, message.MessageThreadID, response)
}

func (h *MessageHandler) SendMessage(chatID int64, threadID int, text string) error {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", h.Token)

	params := url.Values{}
	params.Add("chat_id", strconv.FormatInt(chatID, 10))
	params.Add("text", text)
	params.Add("parse_mode", "HTML")

	if threadID != 0 {
		params.Add("message_thread_id", strconv.Itoa(threadID))
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ %d", threadID)
	} else {
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
	}

	resp, err := http.PostForm(apiURL, params)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	if resp.StatusCode != http.StatusOK {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ API: %s - %s", resp.Status, string(body))
		return fmt.Errorf("API error: %s - %s", resp.Status, string(body))
	}

	log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
func (h *MessageHandler) getCaptionText(caption string) string {
	if caption == "" {
		return "<i>–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏</i>"
	}
	return caption
}

func (h *MessageHandler) getChatTitle(chat models.Chat) string {
	if chat.Title != "" {
		return chat.Title
	}
	return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
}
